!function(t,i){"object"==typeof exports&&"undefined"!=typeof module?i(exports):"function"==typeof define&&define.amd?define(["exports"],i):i((t="undefined"!=typeof globalThis?globalThis:t||self).DotPlot={})}(this,(function(t){"use strict";class i{constructor(t={}){this.id=t.id||`shape-${Math.random().toString(36).slice(2)}`,this.classes=t.classes||[],this.style=t.style||{}}toSVG(){throw new Error("Not implemented")}}t.BaseShape=i,t.Circle=class extends i{constructor(t={}){super(t),this.center=t.center||{x:0,y:0},this.radius=t.radius||10,this.fill=t.fill||"transparent",this.stroke=t.stroke||"#000",this.strokeWidth=t.strokeWidth||1}toSVG(){return`\n      <circle \n        cx="${this.center.x}" \n        cy="${this.center.y}" \n        r="${this.radius}"\n        fill="${this.fill}"\n        stroke="${this.stroke}"\n        stroke-width="${this.strokeWidth}"\n      />\n    `}},t.Line=class extends i{constructor(t={}){super(t),this.start=t.start||{x:0,y:0},this.end=t.end||{x:50,y:50},this.stroke=t.stroke||"#000000",this.strokeWidth=t.strokeWidth||2,this.dashArray=t.dashArray||[],this.arrowStart=t.arrowStart||!1,this.arrowEnd=t.arrowEnd||!1,this.arrowSize=t.arrowSize||8}toSVG(){const t={x1:this.start.x,y1:this.start.y,x2:this.end.x,y2:this.end.y,stroke:this.stroke,"stroke-width":this.strokeWidth,"stroke-dasharray":this.dashArray.join(","),"marker-start":this.arrowStart?`url(#arrow-start-${this.id})`:void 0,"marker-end":this.arrowEnd?`url(#arrow-end-${this.id})`:void 0},i=Object.entries(t).filter((([t,i])=>void 0!==i)).map((([t,i])=>`${t}="${i}"`)).join(" ");let s="";return(this.arrowStart||this.arrowEnd)&&(s=`\n        <defs>\n          ${this.arrowStart?this._createArrowMarker("start"):""}\n          ${this.arrowEnd?this._createArrowMarker("end"):""}\n        </defs>\n      `),`${s}<line ${i} />`}_createArrowMarker(t){const i=`arrow-${t}-${this.id}`,s="start"===t?"auto-start-reverse":"auto",h=this.stroke;return`\n      <marker id="${i}"\n              markerWidth="${this.arrowSize}" \n              markerHeight="${this.arrowSize}"\n              refX="${"start"===t?this.arrowSize:0}"\n              refY="${this.arrowSize/2}"\n              orient="${s}">\n        <path d="M0,0 L${this.arrowSize},${this.arrowSize/2} L0,${this.arrowSize} Z" \n              fill="${h}" />\n      </marker>\n    `}get length(){const t=this.end.x-this.start.x,i=this.end.y-this.start.y;return Math.sqrt(t*t+i*i)}get angle(){const t=this.end.x-this.start.x,i=this.end.y-this.start.y;return 180*Math.atan2(i,t)/Math.PI}getBBox(){return{x:Math.min(this.start.x,this.end.x),y:Math.min(this.start.y,this.end.y),width:Math.abs(this.end.x-this.start.x),height:Math.abs(this.end.y-this.start.y)}}},t.Rectangle=class extends i{constructor(t={}){super(t),this.position=t.position||{x:0,y:0},this.width=t.width||30,this.height=t.height||20,this.cornerRadius=t.cornerRadius||0,this.fill=t.fill||"transparent",this.stroke=t.stroke||"#000000",this.strokeWidth=t.strokeWidth||1,this.dashArray=t.dashArray||[],this.rotation=t.rotation||0}toSVG(){const t={x:this.position.x,y:this.position.y,width:this.width,height:this.height,rx:this.cornerRadius||void 0,fill:this.fill,stroke:this.stroke,"stroke-width":this.strokeWidth,"stroke-dasharray":this.dashArray.join(","),transform:this.rotation?`rotate(${this.rotation} ${this.position.x+this.width/2} ${this.position.y+this.height/2})`:void 0};return`<rect ${Object.entries(t).filter((([t,i])=>void 0!==i)).map((([t,i])=>`${t}="${i}"`)).join(" ")} />`}get center(){return{x:this.position.x+this.width/2,y:this.position.y+this.height/2}}containsPoint(t){return t.x>=this.position.x&&t.x<=this.position.x+this.width&&t.y>=this.position.y&&t.y<=this.position.y+this.height}getBBox(){return{x:this.position.x,y:this.position.y,width:this.width,height:this.height}}},t.Rhombus=class extends i{constructor(t={}){super(t),this.center=t.center||{x:0,y:0},this.width=t.width||40,this.height=t.height||60,this.fill=t.fill||"transparent",this.stroke=t.stroke||"#000000",this.strokeWidth=t.strokeWidth||1,this.dashArray=t.dashArray||[],this.rotation=t.rotation||0}toSVG(){const t={points:[{x:this.center.x,y:this.center.y-this.height/2},{x:this.center.x+this.width/2,y:this.center.y},{x:this.center.x,y:this.center.y+this.height/2},{x:this.center.x-this.width/2,y:this.center.y}].map((t=>`${t.x},${t.y}`)).join(" "),fill:this.fill,stroke:this.stroke,"stroke-width":this.strokeWidth,"stroke-dasharray":this.dashArray.join(","),transform:this.rotation?`rotate(${this.rotation} ${this.center.x} ${this.center.y})`:void 0};return`<polygon ${Object.entries(t).filter((([t,i])=>void 0!==i)).map((([t,i])=>`${t}="${i}"`)).join(" ")} />`}containsPoint(t){const i=-this.rotation*Math.PI/180,s=Math.cos(i),h=Math.sin(i),r=t.x-this.center.x,e=t.y-this.center.y,o=r*s-e*h,n=r*h+e*s;return Math.abs(o)/(this.width/2)+Math.abs(n)/(this.height/2)<=1}getBBox(){const t=this.rotation*Math.PI/180,i=Math.abs(Math.cos(t)),s=Math.abs(Math.sin(t)),h=this.width/2,r=this.height/2,e=h*i+r*s,o=h*s+r*i;return{x:this.center.x-e,y:this.center.y-o,width:2*e,height:2*o}}},t.Square=class extends i{constructor(t={}){super(t),this.center=t.center||{x:0,y:0},this.size=t.size||20,this.fill=t.fill||"transparent",this.stroke=t.stroke||"#000000",this.strokeWidth=t.strokeWidth||1,this.dashArray=t.dashArray||[],this.rotation=t.rotation||0}toSVG(){const t=this.size/2,i={x:this.center.x-t,y:this.center.y-t,width:this.size,height:this.size,fill:this.fill,stroke:this.stroke,"stroke-width":this.strokeWidth,"stroke-dasharray":this.dashArray.join(","),transform:this.rotation?`rotate(${this.rotation} ${this.center.x} ${this.center.y})`:void 0};return`<rect ${Object.entries(i).filter((([t,i])=>void 0!==i)).map((([t,i])=>`${t}="${i}"`)).join(" ")} />`}containsPoint(t){const i=this.size/2;return t.x>=this.center.x-i&&t.x<=this.center.x+i&&t.y>=this.center.y-i&&t.y<=this.center.y+i}getBBox(){return{x:this.center.x-this.size/2,y:this.center.y-this.size/2,width:this.size,height:this.size}}},t.Trapezoid=class extends i{constructor(t={}){super(t),this.center=t.center||{x:0,y:0},this.topWidth=t.topWidth||30,this.bottomWidth=t.bottomWidth||50,this.height=t.height||40,this.offset=t.offset||0,this.fill=t.fill||"transparent",this.stroke=t.stroke||"#000000",this.strokeWidth=t.strokeWidth||1,this.dashArray=t.dashArray||[],this.rotation=t.rotation||0}get area(){return(this.topWidth+this.bottomWidth)/2*this.height}toSVG(){const t=this.topWidth/2,i=this.bottomWidth/2,s=this.height/2,h={points:[{x:this.center.x-t+this.offset,y:this.center.y-s},{x:this.center.x+t+this.offset,y:this.center.y-s},{x:this.center.x+i,y:this.center.y+s},{x:this.center.x-i,y:this.center.y+s}].map((t=>`${t.x},${t.y}`)).join(" "),fill:this.fill,stroke:this.stroke,"stroke-width":this.strokeWidth,"stroke-dasharray":this.dashArray.join(","),transform:this.rotation?`rotate(${this.rotation} ${this.center.x} ${this.center.y})`:void 0};return`<polygon ${Object.entries(h).filter((([t,i])=>void 0!==i)).map((([t,i])=>`${t}="${i}"`)).join(" ")} />`}containsPoint(t){let i=t.x-this.center.x,s=t.y-this.center.y;if(0!==this.rotation){const t=-this.rotation*Math.PI/180,h=Math.cos(t),r=Math.sin(t),e=i*r+s*h;i=i*h-s*r,s=e}const h=this.height/2;if(Math.abs(s)>h)return!1;const r=(s+h)/this.height,e=this.bottomWidth+(this.topWidth-this.bottomWidth)*r,o=this.offset*r;return i>=-e/2+o&&i<=e/2+o}getBBox(){const t=this.topWidth/2,i=this.bottomWidth/2,s=this.height/2,h=Math.min(-t+this.offset,-i),r=Math.max(t+this.offset,i);return{x:this.center.x+h,y:this.center.y-s,width:r-h,height:this.height}}},Object.defineProperty(t,"__esModule",{value:!0})}));
